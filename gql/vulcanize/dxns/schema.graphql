# Reference to another record.
type Reference {
    id:         String!         # ID of linked record.
}

# Reference to another record.
input ReferenceInput {
    id:         String!
}

# Bonds contain funds that are used to pay rent on record registration and renewal.
type Bond {
    id:         String!         # Primary key, auto-generated by the server.
    owner:      String!         # Bond owner cosmos-sdk address.
    balance:    [Coin!]         # Current balance for each coin type.
}

# OwnerBonds contains the bonds related the owner
type OwnerBonds {
    owner: String!
    bonds: [Bond!]
}

# Mutations require payment in coins (e.g. 100wire).
# Used by the wallet to get the account balance for display and mutations.
type Coin {
    type:       String!         # e.g. 'WIRE'
    quantity:   String!         # e.g. 1000000
}
# Represents an account on the blockchain.
# Mutations have to be signed by a particular account.
type Account {
    address:  String!           # Blockchain address.
    pubKey:   String            # Public key.
    number:   String!           # Account number.
    sequence: String!           # Sequence number used to prevent replays.
    balance:  [Coin!]           # Current balance for each coin type.
}

# Value of a given type.
type Value {
    null:       Boolean

    int:        Int
    float:      Float
    string:     String
    boolean:    Boolean
    json:       String

    reference:  Reference

    values:     [Value]
}
# Value of a given type used as input to queries.
input ValueInput {
    null:       Boolean

    int:        Int
    float:      Float
    string:     String
    boolean:    Boolean

    reference:  ReferenceInput

    values:     [ValueInput]
}


# Key/value pair.
type KeyValue {
    key:        String!
    value:      Value!
}

# Key/value pair for inputs.
input KeyValueInput {
    key:        String!
    value:      ValueInput!
}

type Query {

    # Get blockchain accounts.
    getAccounts(
        addresses: [String!]
    ): [Account]

    # Get bonds by IDs.
    getBondsByIds(
        ids: [String!]
    ): [Bond]

    # Query bonds.
    queryBonds(
        attributes: [KeyValueInput]
    ): [Bond]

    # Query bonds by owner.
    queryBondsByOwner(
        ownerAddresses: [String!]
    ): [OwnerBonds]
}